;;; core-env.el --- Space-macs Core File
;;
;; Copyright (c) 2012-2020 Sylvain Benner & Contributors
;;
;; Author: Sylvain Benner <sylvain.benner@gmail.com>
;; URL: https://github.com/syl20bnr/space-macs
;;
;; This file is not part of GNU e-macs.
;;
;;; License: GPLv3

(require 'core-dotspace-macs)
(require 'load-env-vars)

(defvar space-macs-env-vars-file
  (concat (or dotspace-macs-directory user-home-directory) ".space-macs.env")
  "Absolute path to the env file where environment variables are set.")

(defvar space-macs-ignored-environment-variables
  '(
    "DBUS_SESSION_BUS_ADDRESS"
    "GPG_AGENT_INFO"
    "SSH_AGENT_PID"
    "SSH_AUTH_SOCK"
    )
  "Ignored environments variables.
Environment variables with names matching these regexps are not
imported into the `.space-macs.env' file.")

(defvar space-macs--space-macs-env-loaded nil
  "non-nil if `space-macs/load-space-macs-env' has been called at least once.")

(defun space-macs//init-space-macs-env (&optional force)
  "Attempt to fetch the environment variables from the users shell.
This solution is far from perfect and we should not rely on this function
a lot. We use it only to initialize the env file when it does not exist
yet.
If FORCE is non-nil then force the initialization of the file, note that the
current contents of the file will be overwritten."
  (when (or force (not (file-exists-p space-macs-env-vars-file)))
    (with-temp-file space-macs-env-vars-file
      (let ((shell-command-switches (cond
                                     ((or(eq system-type 'darwin)
                                         (eq system-type 'gnu/linux))
                                      ;; execute env twice, once with a
                                      ;; non-interactive login shell and
                                      ;; once with an interactive shell
                                      ;; in order to capture all the init
                                      ;; files possible.
                                      '("-lc" "-ic"))
                                     ((eq system-type 'windows-nt) '("-c"))))
            (tmpfile (make-temp-file space-macs-env-vars-file))
            (executable (cond ((or(eq system-type 'darwin)
                                  (eq system-type 'gnu/linux)) "env")
                              ((eq system-type 'windows-nt) "set"))))
        (insert
         (concat
          "# ---------------------------------------------------------------------------\n"
          "#                    Space-macs environment variables\n"
          "# ---------------------------------------------------------------------------\n"
          "# This file has been generated by Space-macs. It contains all environment\n"
          "# variables defined in your default shell except those with names matching\n"
          "# regexps in `space-macs-ignored-environment-variables'. If you add any\n"
          "# duplicate settings for a variable, only the first setting is effective.\n"
          "# PATH is a special case: all PATH settings are read, each non-duplicate\n"
          "# directory entry is prepended to the `exec-path' variable, and then PATH is\n"
          "# set to the final value of `exec-path'.\n"
          "#\n"
          "# You can safely edit this file to change values or add or remove entries.\n"
          "# Space-macs won't overwrite the file unless you call the function\n"
          "# `space-macs/force-init-space-macs-env'.\n"
          "#\n"
          "# If you don't want to use this file but would rather manage your environment\n"
          "# variables yourself, remove the call to `space-macs/load-space-macs-env' from\n"
          "# the `dotspace-macs/user-env' function in your dotfile and replace it with\n"
          "# your own initialization code. You can use `exec-path-from-shell' if you add\n"
          "# it to your additional packages, or simply use `setenv' and\n"
          "# `(add-to-list 'exec-path ...)', which are built-in.\n"
          "#\n"
          "# It is recommended to use this file as it unambiguously and explicitly sets\n"
          "# the values of your environment variables.\n"
          "# ---------------------------------------------------------------------------\n"
          "\n"
          "# Environment variables:\n"
          "# ----------------------\n"))
        (let ((env-point (point)))
          (dolist (shell-command-switch shell-command-switches)
            (call-process-shell-command
             (concat executable " > " (shell-quote-argument tmpfile)))
            (insert-file-contents tmpfile))
          (delete-file tmpfile)
          ;; sort the environment variables
          (sort-regexp-fields nil "^.*$" ".*?=" env-point (point-max))
          ;; remove adjacent duplicated lines
          (delete-duplicate-lines env-point (point-max) nil t)
          ;; remove ignored environment variables
          (dolist (v space-macs-ignored-environment-variables)
            (flush-lines v env-point (point-max))))))
    (space-macs-buffer/warning
     (concat "Space-macs has imported your environment variables from "
             "your shell and saved them to `%s'.\n"
             "Open this file for more info (SPC f e e) or call "
             "`space-macs/edit-env' function.")
     space-macs-env-vars-file)))

(defun space-macs/force-init-space-macs-env ()
  "Forces a reinitialization of environment variables."
  (interactive)
  (space-macs//init-space-macs-env t))

(defun space-macs/edit-env ()
  "Open the `.space-macs.env' file for editing."
  (interactive)
  (if (and space-macs--space-macs-env-loaded
           (file-exists-p space-macs-env-vars-file))
      (progn
        (find-file space-macs-env-vars-file)
        (when (fboundp 'dotenv-mode)
          (dotenv-mode)))
    ;; fallback to the dotspace-macs/user-env
    (dotspace-macs/go-to-user-env)))

(defun space-macs/load-space-macs-env (&optional force)
  "Load the environment variables from the `.space-macs.env' file.
If FORCE is non-nil then force the loading of environment variables from env.
file."
  (interactive "P")
  (setq space-macs--space-macs-env-loaded t)
  (when (or force (display-graphic-p))
    (space-macs//init-space-macs-env force)
    (load-env-vars space-macs-env-vars-file)))

(provide 'core-env)


